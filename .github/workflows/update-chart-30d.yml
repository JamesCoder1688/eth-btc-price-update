name: Update 30D Chart Data

on:
  schedule:
    - cron: "0 */4 * * *" # 每4小时更新30天图表数据
  workflow_dispatch: # 手动运行也可以

# 防止并发执行，避免推送冲突
concurrency:
  group: chart-data-update
  cancel-in-progress: false

jobs:
  update-chart-30d:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Update 30d chart data
        run: |
          # 添加随机延迟以避免API限制
          sleep $((RANDOM % 120))
          npm run update:chart-30d

      - name: Commit and push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # 添加文件到暂存区 - 新的独立图表文件
          git add public/eth-chart-30d.json || true
          git add public/btc-chart-30d.json || true
          
          # 检查是否有改动
          if git diff --staged --quiet; then
            echo "没有改动可提交"
            exit 0
          fi
          
          # 增强的冲突处理和重试机制（最多5次）
          for i in {1..5}; do
            echo "=== 尝试推送 (第 $i 次) ==="
            
            # 先拉取最新更改
            echo "🔄 同步远程更改..."
            git fetch origin main
            
            # 尝试rebase
            if git rebase origin/main; then
              echo "✅ Rebase 成功"
            else
              echo "❌ Rebase 冲突，尝试解决..."
              git rebase --abort
              git reset --hard origin/main
              
              # 重新添加我们的更改
              git add public/eth-chart-30d.json || true
              git add public/btc-chart-30d.json || true
              
              # 如果没有更改就退出
              if git diff --staged --quiet; then
                echo "📋 与远程版本一致，无需推送"
                exit 0
              fi
            fi
            
            # 重新提交
            git commit -m "更新 30天图表数据 [CI 自动] (重试 $i)" || true
            
            # 尝试推送
            if git push origin main; then
              echo "🎉 推送成功！"
              exit 0
            else
              echo "⚠️  推送失败，等待 $((i * 30)) 秒后重试..."
              sleep $((i * 30))
            fi
          done
          
          echo "❌ 推送失败，已重试5次，跳过本次更新"
          exit 0